library(tidyverse)
library(readxl)
library(dbscan)
#library(caret)
library(GGally)
library(corrplot)
library(ClusterR)
library(tidyverse)
library(readxl)
library(dbscan)
#library(caret)
library(GGally)
library(corrplot)
library(ClusterR)
library(cluster)
#library(factoextra)
#library(dendextend)
#library(Hmisc)
library(writexl)
setwd("/Users/miss_viktoriia/Documents/CheapTrip")
trips_2 <- read_csv("all_direct_routes_validation.csv")
sum(is.na(trips_2))
summary(trips_2)
trips_2 <- trips_2 %>%
distinct(.keep_all = FALSE) %>%
filter(frequency_tpw != -1)
#-----------------------------------------------------------------------------
Full_list_with_countries <- read_excel("locations_with_id.xlsx",
range = "A1:H775", col_names = FALSE)
location <- Full_list_with_countries
location <- location %>%
rename(id_city = ...1, city = ...2, id_country = ...3, country = ...8) %>%
select(id_city, city, id_country, country)
locations_from <- location %>%
rename(from_id = id_city, from_city = city,
from_country_id = id_country, from_country = country)
locations_to <- location %>%
rename(to_id = id_city, to_city = city,
to_country_id = id_country, to_country = country)
connected_from_2 <- left_join(trips_2, locations_from, by = "from_id")
connected_to_2 <- left_join(connected_from_2, locations_to, by = "to_id")
trips_general_2 <- connected_to_2
#-----------------------------------------------------------------------------
trips_general_2 <- trips_general_2 %>%
distinct(.keep_all = FALSE)
trips_general_2$transport_id <- as.factor(trips_general_2$transport_id)
summary(trips_general_2)
setwd("/Users/miss_viktoriia/Documents/CheapTrip")
trips_2 <- read_csv("all_direct_routes_validation.csv")
sum(is.na(trips_2))
summary(trips_2)
trips_2 <- trips_2 %>%
distinct(.keep_all = FALSE) %>%
filter(frequency_tpw != -1)
#-----------------------------------------------------------------------------
Full_list_with_countries <- read_excel("locations_with_id.xlsx",
range = "A1:H775", col_names = FALSE)
location <- Full_list_with_countries
location <- location %>%
rename(id_city = ...1, city = ...2, id_country = ...3, country = ...8) %>%
select(id_city, city, id_country, country)
locations_from <- location %>%
rename(from_id = id_city, from_city = city,
from_country_id = id_country, from_country = country)
locations_to <- location %>%
rename(to_id = id_city, to_city = city,
to_country_id = id_country, to_country = country)
#-----------------------------------------------------------------------------
connected_from_2 <- left_join(trips_2, locations_from, by = "from_id")
connected_to_2 <- left_join(connected_from_2, locations_to, by = "to_id")
trips_general_2 <- connected_to_2
#-----------------------------------------------------------------------------
trips_general_2 <- trips_general_2 %>%
distinct(.keep_all = FALSE)
trips_general_2$transport_id <- as.factor(trips_general_2$transport_id)
summary(trips_general_2)
flight <- trips_general_2 %>%
filter(transport_id == 1) %>%
filter(price_min_EUR < 20000)
ggplot(flight) +
geom_point(aes(x = duration_min, y = price_min_EUR))
flight <- trips_general_2 %>%
filter(transport_id == 1)
ggplot(flight) +
geom_point(aes(x = duration_min, y = price_min_EUR))
flight <- trips_general_2 %>%
filter(transport_id == 1) %>%
filter(price_min_EUR < 20000)
ggplot(flight) +
geom_point(aes(x = duration_min, y = price_min_EUR))
flights_subset <- flight %>%
filter((from_id %in% c(100:386)) | (to_id %in% c(100:386)))
summary(flights_subset)
flight <- trips_general_2 %>%
filter(transport_id == 1)
ggplot(flight) +
geom_point(aes(x = duration_min, y = price_min_EUR))
flight <- trips_general_2 %>%
filter(price_min_EUR < 20000)
ggplot(flight) +
geom_point(aes(x = duration_min, y = price_min_EUR))
flights_subset <- flight %>%
filter((from_id %in% c(100:386)) | (to_id %in% c(100:386)))
ggplot(flight) +
geom_point(aes(x = duration_min, y = price_min_EUR))
flights_subset <- flight %>%
filter((from_id %in% c(100:386)) | (to_id %in% c(100:386)))
flights_subset <- flight %>%
filter((from_id %in% c(100:386)) | (to_id %in% c(100:386)))
ggplot(flights_subset) +
geom_point(aes(x = duration_min, y = price_min_EUR))
flights_subset <- flight %>%
filter((from_id %in% c(100:386)) & (to_id %in% c(100:386)))
ggplot(flights_subset) +
geom_point(aes(x = duration_min, y = price_min_EUR))
summary(flights_subset)
bus <- trips_general_2 %>%
filter(transport_id == 2) %>%
filter((from_id %in% c(100:386)) & (to_id %in% c(100:386)))
ggplot(bus) +
geom_point(aes(x = duration_min, y = price_min_EUR))
ggplot(bus) +
geom_point(aes(x = distance_km, y = price_min_EUR))
ggplot(bus) +
geom_point(aes(x = frequency_tpw, y = price_min_EUR))
ggplot(bus) +
geom_histogram(aes(x = frequency_tpw))
ggplot(bus) +
geom_histogram(aes(x = distance_km))
ggplot(bus) +
geom_histogram(aes(x = duration_min))
ggplot(bus) +
geom_histogram(aes(x = price_min_EUR))
df_bus <- bus %>%
select(price_min_EUR,
duration_min,
distance_km,
frequency_tpw)
summary(df_bus)
abnormal_frequency <- df_bus %>%
filter(frequency_tpw > 20)
ggplot(abnormal_frequency) +
geom_point(aes(x = duration_min, y = price_min_EUR))
ggpairs(df_bus)
ggpairs(abnormal_frequency)
col <- colorRampPalette(c("black", "darkgray", "gray", "yellow"))
corrplot(cor(df_bus),
method = "ellipse",
col = col(100),
addCoef.col = "black",
tl.col = "black")
corrplot(cor(abnormal_frequency),
method = "ellipse",
col = col(100),
addCoef.col = "black",
tl.col = "black")
scale <- preProcess(df_bus, method = "range")
library(caret)
scale <- preProcess(df_bus, method = "range")
df_bus <- predict(scale, df_bus)
set.seed(876)
hdb <- hdbscan(df_bus[, 1:4],
minPts = 10)
hullplot(df_bus[, 1:4], hdb$cluster)
df_bus <- df_bus %>%
mutate(cluster_hdb = hdb$cluster)
withou_noise <- df_bus %>%
filter(cluster_hdb != 0)
ggplot(df_bus) +
geom_point(aes(x = duration_min, y = price_min_EUR, color = factor(cluster_hdb)))
kNNdistplot(df_bus[,1:4], k=5)
abline(h=0.05, col="red")
set.seed(174)
db <- dbscan(df_bus[,1:4],
eps = 0.05,
minPts = 10,
borderPoints = TRUE)
hullplot(df_bus[,1:4], db$cluster)
df_bus <- df_bus %>%
mutate(cluster_db = db$cluster)
withou_noise2 <- df_bus %>%
filter(cluster_db != 0)
ggplot(withou_noise2) +
geom_point(aes(x = duration_min, y = price_min_EUR, color = factor(cluster_db)))
gmm_model <- GMM(df_bus[,1:4],
gaussian_comps = 50,
dist_mode = "maha_dist",
km_iter = 10,
em_iter = 10)
pred_gmm <- predict(gmm_model, df_bus[,1:4])
df_bus <- df_bus %>%
mutate(cluster_gmm = pred_gmm)
ggplot(df_bus) +
geom_point(aes(x = duration_min, y = price_min_EUR, color = factor(cluster_gmm)))
opt_gmm <- Optimal_Clusters_GMM(df_bus[,1:4],
max_clusters = 50,
criterion = "BIC",
dist_mode = "maha_dist",
km_iter = 10,
em_iter = 10,
plot_data = T)
train <- trips_general_2 %>%
filter(transport_id == 3)
ggplot(train) +
geom_point(aes(x = duration_min, y = price_min_EUR))
setwd("/Users/miss_viktoriia/Documents/CheapTrip/Git_project_validation/Trips-Validation/Datasets")
bus <- read_excel("bus_for_labeling.xlsx") %>%
select(from_id,
to_id,
price_min_EUR,
duration_min,
distance_km,
frequency_tpw,
Outcome) %>%
filter(!is.na(Outcome))
countries <- read_excel("locations_with_id.xlsx",
range = "A1:H775",
col_names = FALSE) %>%
rename(id_city = ...1,
city = ...2,
id_country = ...3,
country = ...8,
latitude = ...4,
longitude = ...5) %>%
select(id_city,
city,
id_country,
country,
latitude,
longitude)
locations_from <- countries %>%
rename(from_id = id_city, from_city = city,
from_country_id = id_country, from_country = country,
from_latitude = latitude, from_longitude = longitude)
locations_to <- countries %>%
rename(to_id = id_city, to_city = city,
to_country_id = id_country, to_country = country,
to_latitude = latitude, to_longitude = longitude)
connection_from <- left_join(bus, locations_from, by = c("from_id" = "from_id"))
connection_to <- left_join(connection_from, locations_to, by = c("to_id" = "to_id"))
bus_for_modeling <- connection_to %>%
select(price_min_EUR,
duration_min,
distance_km,
frequency_tpw,
from_latitude,
from_longitude,
to_latitude,
to_longitude,
Outcome)
bus_for_modeling$Outcome <- as.factor(bus_for_modeling$Outcome)
scale_lat_from <- preProcess(bus_for_modeling[,5], method = "range",
rangeBounds = c(0.61, 1.01))
bus_for_modeling[,5] <- predict(scale_lat_from, newdata = bus_for_modeling[,5])
scale_lat_to <- preProcess(bus_for_modeling[,7], method = "range",
rangeBounds = c(0.61, 1.09))
bus_for_modeling[,7] <- predict(scale_lat_to, newdata = bus_for_modeling[,7])
scale_long_from <- preProcess(bus_for_modeling[,6], method = "range",
rangeBounds = c(-0.15, 0.48))
bus_for_modeling[,6] <- predict(scale_long_from, newdata = bus_for_modeling[,6])
scale_long_to <- preProcess(bus_for_modeling[,8], method = "range",
rangeBounds = c(-0.15, 0.46))
bus_for_modeling[,8] <- predict(scale_long_to, newdata = bus_for_modeling[,8])
set.seed(333)
ind <- createDataPartition(bus_for_modeling$Outcome, p = .8, list = FALSE)
train <- bus_for_modeling[ ind,]
test  <- bus_for_modeling[-ind,]
train <- train %>%
mutate(log_price = log(price_min_EUR),
log_duration = log(duration_min),
log_dist = log(distance_km)) %>%
select(-price_min_EUR,
-duration_min,
-distance_km,
-frequency_tpw) %>%
select(Outcome, everything())
test <- test %>%
mutate(log_price = log(price_min_EUR),
log_duration = log(duration_min),
log_dist = log(distance_km)) %>%
select(-price_min_EUR,
-duration_min,
-distance_km,
-frequency_tpw) %>%
select(Outcome, everything())
scale <- preProcess(train[,c(6:8)], method = c("center", "scale"))
train[,c(6:8)] <- predict(scale, newdata = train[,c(6:8)])
test[,c(6:8)] <- predict(scale, newdata = test[,c(6:8)])
# Modeling
set.seed(111)
model_LDA <- MASS::lda(Outcome ~ .,
data = train,
method = "mve",
nu = 2.5)
pr <- predict(model_LDA, test, type = "prob")
cl <- ifelse(pr$posterior[,2] >= 0.5191759, 1, 0)
confusionMatrix(factor(cl), test$Outcome, positive = "1")$byClass
new_dataset <- read_excel("/Users/miss_viktoriia/Documents/CheapTrips/bus_without_labels.xlsx") %>%
select(from_id,
to_id,
price_min_EUR,
duration_min,
distance_km,
transport_id) %>%
filter(transport_id == 2) %>%
select(-transport_id) %>%
filter((from_id %in% c(100:386)) & (to_id %in% c(100:386)))
new_dataset <- read_excel("bus_without_labels.xlsx") %>%
select(from_id,
to_id,
price_min_EUR,
duration_min,
distance_km,
transport_id) %>%
filter(transport_id == 2) %>%
select(-transport_id) %>%
filter((from_id %in% c(100:386)) & (to_id %in% c(100:386)))
from <- left_join(new_dataset, locations_from, by = c("from_id" = "from_id"))
to <- left_join(from, locations_to, by = c("to_id" = "to_id"))
data_prediction <- to %>%
select(price_min_EUR,
duration_min,
distance_km,
from_latitude,
from_longitude,
to_latitude,
to_longitude)
lat <- preProcess(data_prediction[,c(4,6)], method = "range",
rangeBounds = c(0.49, 1.01))
data_prediction[,c(4,6)] <- predict(lat, newdata = data_prediction[,c(4,6)])
long <- preProcess(data_prediction[,c(5,7)], method = "range",
rangeBounds = c(-0.15, 0.66))
data_prediction[,c(5,7)] <- predict(long, newdata = data_prediction[,c(5,7)])
data_prediction <- data_prediction %>%
mutate(log_price = log(price_min_EUR),
log_duration = log(duration_min),
log_dist = log(distance_km)) %>%
select(-price_min_EUR,
-duration_min,
-distance_km)
data_prediction[,c(5:7)] <- predict(scale, newdata = data_prediction[,c(5:7)])
bus_predict <- predict(model_LDA, data_prediction, type = "prob")
class <- ifelse(bus_predict$posterior[,2] >= 0.5191759, 1, 0)
data_prediction <- new_dataset %>%
mutate(Predicted_Outcome = class)
buses_valid_trips <- data_prediction %>%
filter(Predicted_Outcome == 0)
buses_invalid_trips <- data_prediction %>%
filter(Predicted_Outcome == 1)
